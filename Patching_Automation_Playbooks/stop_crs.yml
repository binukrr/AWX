---
- name: Playbook for stop CRS
  hosts: all
  remote_user: svclnx
  become: yes

  tasks:
    - name: Check whether Oracle Application/DB is installed on server. 
      stat:
        path: /etc/oraInst.loc
      register: file_stat
     
    - name: Check whether it is a Application server or Database.
      shell: "grep ^inventory_loc /etc/oraInst.loc | awk -F'/' '{print $3}'"
      register: app_db_stat
      when: file_stat.stat.exists == True
  
    - name: Checking for running DB instance. 
      shell: "ps -aef | grep -i ora_pmon | grep -v grep | wc -l"
      register: inst_count
      when: 
        - file_stat.stat.exists == True 
        - app_db_stat.stdout == "ora"
     
    - fail:
        msg: "DB Instance \"{{ DB_INST.stdout }}\" is still running. Exitting play for "
      when: 
        - file_stat.stat.exists == True 
        - app_db_stat.stdout == "ora"  
        - inst_count.stdout != "0"

    - name: Check whether the DB server is a single node or multi node cluster
      shell: "grep MGMTDB /etc/oratab | awk -F':' '{print $2}' | awk -F'/' '{print $NF}'"
      register: db_node_count
      when: 
        - file_stat.stat.exists == True 
        - app_db_stat.stdout == "ora"

    - name: Fetching CRS path...
      shell: "grep MGMTDB /etc/oratab | awk -F':' '{print $2}'"
      register: crs_path
      when: 
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora" 
        - db_node_count.stdout == "crs"

    - name: Checking CRS status
      shell: "cd \"{{ crs_path.stdout }}\"/bin && ./crsctl check crs"
      register: crs_status
      when:
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora" 
        - db_node_count.stdout == "crs"

    - name: Print CRS status
      debug:
        msg: "{{ crs_status.stdout.split('\n') }}"
      when: 
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora"
        - db_node_count.stdout == "crs"

    - name: Stopping CRS....
      shell: "cd \"{{ crs_path.stdout }}\"/bin && ./crsctl stop crs"
      register: crs_stop
      when:
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora" 
        - db_node_count.stdout == "crs"
      ignore_errors: yes

    - name: Displaying Logs for CRS stop. 
      debug:
        msg: "{{ crs_stop.stdout.split('\n') }}"
      when:
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora"
        - db_node_count.stdout == "crs"
        - crs_stop is defined

    - debug:
        msg: CRS Service successfully stopped. 
      when:
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora"
        - db_node_count.stdout == "crs"
        - crs_stop.rc == 0 

    - fail:
        msg: "ERROR: CRS SERVICE IS NOT ABLE TO STOP - LOGIN AND CHECK THE STATUS"
      when:
        - file_stat.stat.exists == True
        - app_db_stat.stdout == "ora"
        - db_node_count.stdout == "crs"
        - crs_stop.rc != 0
